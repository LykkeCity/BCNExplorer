@using Common
@model TransactionViewModel
@{
    Layout = null;
    var btcAsset = Model.InOutsByAssets.FirstOrDefault(p => !p.IsColored);
    var coloredAssets = Model.InOutsByAssets.Where(p => p.IsColored);
}

<ul class="list-group">
    <li class="list-group-item clearfix intput-output-group-list-item">
        <div class="assetid">
            <h3 class="panel-title hd-bt">Bitcoin</h3>
        </div>
        <div class="intput-output-group">
            <div class="icon dspl-icon">
                <span class="currency-icon thumbnail">
                    <span class="bg-warning">
                        <i class="fa fa-btc"></i>
                    </span>
                </span>
            </div>
            <div class="inputs">
                @if (Model.IsCoinBase)
                {
                    <div class="address-item ">
                        <div class="amount">

                        </div>
                        <div class="address">
                            <b>Mined coins</b>
                        </div>
                    </div>
                }
                else
                {

                    foreach (var input in btcAsset.TransactionIn.Where(input => input.Value != 0))
                    {
                        <div class="address-item ">
                            <div class="amount">
                                - @BitcoinUtils.SatoshiToBtc(input.Value).ToString("0.00######")
                            </div>
                            <div class="address">
                                <a href="@Url.Action("Index", "Transaction", new {id = input.TransactionId})"><i class="fa fa-lg fa-arrow-left displ-fa"></i></a>

                                @if (input.Address == null)
                                {
                                    <span>Unrecognized address</span>
                                }
                                else
                                {
                                    <a href="@Url.Action("Index", "Address", new {id = input.Address})">@input.Address</a>
                                }
                            </div>
                        </div>
                    }
                }

            </div>

            <div class="outputs">
                <div class="outputs-container">
                    <div class="center-chevron">
                        <img src="/images/arrow.png"/>
                    </div>

                    @foreach (var output in btcAsset.TransactionsOut.Where(output => output.Value != 0))
                    {
                        <div class="address-item ">
                            <div class="amount">
                                @BitcoinUtils.SatoshiToBtc(output.Value).ToString("0.00######")
                            </div>
                            <div class="address">
                                @if (output.Address == null)
                                {
                                    <span>Unrecognized address</span>
                                }
                                else
                                {
                                    <a href="@Url.Action("Index", "Address", new {id = output.Address})">@output.Address</a>
                                }
                            </div>
                        </div>
                    }
                    <div class="address-item div-fees">
                        <div class="amount">
                            @BitcoinUtils.SatoshiToBtc(Model.Fees).ToString("0.00######")
                        </div>
                        <div class="address">
                            Fees
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </li>

    @foreach (var inOutByAsset in coloredAssets.OrderBy(p => p.AssetId))
    {
        var assetDivisibity = Model.AssetDic.GetAssetProp(inOutByAsset.AssetId, p => p.Divisibility, 0);
        var assetShortName = Model.AssetDic.GetAssetProp(inOutByAsset.AssetId, p => p.NameShort, "");
        var assetName = Model.AssetDic.GetAssetProp(inOutByAsset.AssetId, p => p.Name, null);
        var assetIcon = Model.AssetDic.GetAssetProp(inOutByAsset.AssetId, p => p.IconUrl, null);
        <li class="list-group-item clearfix intput-output-group-list-item assetBlock">

            <div class="assetid">
                @if (assetName == null)
                {
                    <span class="panel-title hd-bt">@assetName</span>
                }
                <span>@inOutByAsset.AssetId</span>
            </div>
            <div class="intput-output-group">
                <div class="icon dspl-icon">
                    <span class="currency-icon thumbnail">
                        @if (assetIcon != null)
                        {
                            <a href="@Url.Action("Index", "Asset", new {id = inOutByAsset.AssetId})">
                                <img src="@assetIcon" />
                            </a>
                        }
                        else
                        {
                            <span class="bg-primary">
                                <i class="fa fa-money"></i>
                            </span>
                        }
                    </span>
                </div>
                <div class="inputs">
                    @if (inOutByAsset.TransactionIn.Any())
                    {
                        foreach (var input in (inOutByAsset.TransactionIn))
                        {

                            <div class="address-item ">
                                <div class="amount">
                                    @{
                                        var l = inOutByAsset.TransactionsOut.Select(itm => itm.Quantity - input.Quantity);
                                        var def = l.FirstOrDefault();
                                        if (def != 0)
                                        {
                                            Write(BitcoinUtils.CalculateColoredAssetQuantity(def, assetDivisibity).ToString("N0") + " " + assetShortName);
                                        }
                                        else
                                        {
                                            Write(" - " + BitcoinUtils.CalculateColoredAssetQuantity(input.Quantity, assetDivisibity).ToString("N0") + " " + assetShortName);
                                        }
                                    }
                                </div>
                                <div class="address">
                                    <a href="@Url.Action("Index", "Transaction", new {id = input.TransactionId})">
                                        <i class="fa fa-lg fa-arrow-left displ-fa"></i>
                                    </a>

                                    @if (input.Address == null)
                                    {
                                        <span>Unrecognized address</span>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Index", "Address", new {id = input.Address})">@input.Address</a>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="address-item ">
                            <div class="amount">

                            </div>
                            <div class="address">
                                <b>Issued assets</b>
                            </div>
                        </div>
                    }
                </div>

                <div class="outputs">
                    <div class="outputs-container">
                        <div class="center-chevron">
                            <img src="/images/arrow.png"/>
                        </div>

                        @foreach (var output in inOutByAsset.TransactionsOut)
                        {
                            <div class="address-item ">
                                <div class="amount">
                                    @BitcoinUtils.CalculateColoredAssetQuantity(output.Quantity, assetDivisibity).ToString("N0")
                                </div>
                                <div class="address">
                                    @if (output.Address == null)
                                    {
                                        <span>Unrecognized address</span>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Index", "Address", new {id = output.Address})">@output.Address</a>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </li>
                                        }
</ul>
