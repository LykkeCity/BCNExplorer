@model TransactionViewModel
@{
    Layout = null;
}

<ul class="list-group">
    <li class="list-group-item clearfix intput-output-group-list-item container-fluid">
        <div class="assetid hd-bt hidden-xs">
            <h3 class="panel-title ">Bitcoin</h3>
        </div>
        <div class="intput-output-group ">
            <div class="row">
                <div class="col-sm-1">
                    <div class="icon dspl-icon " style=" float:left">
                        <span class="currency-icon thumbnail">
                            <span class="bg-warning">
                                <i class="fa fa-btc"></i>
                            </span>
                        </span>
                    </div>
                    <h3 class="hd-bt hidden-sm hidden-md hidden-lg" style="margin-top: 16px; float:left">Bitcoin</h3>
                    <div class="clearfix"></div>
                </div>
                <div class="col-sm-6">
                    <div class="inputs">
                        @if (Model.Bitcoin.IsCoinBase)
                        {
                            <div class="address-item ">
                                <div class="amount">

                                </div>
                                <div class="address">
                                    <b>Mined coins</b>
                                </div>
                            </div>
                        }
                        else
                        {
                            foreach (var input in Model.Bitcoin.AggregatedIns)
                            {
                                <div class="js-aggregated-transactions-container">

                                    @RenderInOut(input.TitleItem)

                                    @if (input.ShowAggregatedTransactions)
                                    {
                                    <div class="hidden-transactions">
                                        @foreach (var aggregated in input.AggregatedTransactions)
                                        {
                                            @RenderInOut(aggregated)
                                        }
                                    </div>
                                    }                                    
                                </div>
                            }
                        }
                    </div>
                </div>
                <div class="col-sm-5">
                    <div class="outputs">
                        <div class="outputs-container">
                            <div class="center-chevron">
                                <img src="/images/arrow.png" />
                            </div>

                            @foreach (var output in Model.Bitcoin.AggregatedOuts)
                            {
                                <div class="js-aggregated-transactions-container">
                                    @RenderInOut(output.TitleItem)

                                    @if (output.ShowAggregatedTransactions)
                                    {
                                        <div class="hidden-transactions">
                                            @foreach (var aggregated in output.AggregatedTransactions)
                                            {
                                                @RenderInOut(aggregated)
                                            }
                                        </div>
                                    }

                                </div>

                            }
                            <div class="address-item div-fees">
                                <div class="amount">
                                    @Model.Bitcoin.Fees.ToString("0.00######")
                                </div>
                                <div class="address">
                                    <span class="fees-text">Fees</span>
                                </div>
                            </div>
                        </div>
                    </div>                   
                </div>
            </div>
        </div>
    </li>

    @foreach (var coloredAsset in Model.ColoredAssets)
    {
        <li class="list-group-item clearfix intput-output-group-list-item container-fluid">
            <div class="assetid hd-bt hidden-xs">
                <h3 class="panel-title ">@coloredAsset.Name</h3>
            </div>
            <div class="intput-output-group ">
                <div class="row">
                    <div class="col-sm-1">
                        <div class="icon dspl-icon " style=" float:left">
                            <span class="currency-icon thumbnail">
                                @if (coloredAsset.IconImageUrl != null)
                                {
                                    <a href="@Url.Action("Index", "Asset", new {id = coloredAsset.AssetId})">
                                        <img src="@coloredAsset.IconImageUrl" />
                                    </a>
                                }
                                else
                                {
                                    <span class="bg-primary">
                                        <i class="fa fa-money"></i>
                                    </span>
                                }
                            </span>
                        </div>
                        <h3 class="hd-bt hidden-sm hidden-md hidden-lg" style="margin-top: 16px; float:left">@coloredAsset.Name</h3>
                        <div class="clearfix"></div>
                    </div>
                    <div class="col-sm-6">
                        <div class="inputs">


                            @foreach (var input in coloredAsset.AggregatedIns)
                            {
                                <div class="js-aggregated-transactions-container">
                                    @RenderInOut(input.TitleItem)

                                    @if (input.ShowAggregatedTransactions)
                                    {
                                        <div class="hidden-transactions">
                                            @foreach (var aggregated in input.AggregatedTransactions)
                                            {
                                                @RenderInOut(aggregated)
                                            }
                                        </div>
                                    }
                                </div>
 
                            }
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="outputs">
                            <div class="outputs-container">
                                <div class="center-chevron">
                                    <img src="/images/arrow.png"/>
                                </div>
                                @foreach (var output in coloredAsset.AggregatedOuts)
                                {

                                    <div class="js-aggregated-transactions-container">
                                        @RenderInOut(output.TitleItem)

                                        @if (output.ShowAggregatedTransactions)
                                        {
                                            <div class="hidden-transactions">
                                                @foreach (var aggregated in output.AggregatedTransactions)
                                                {
                                                    @RenderInOut(aggregated)
                                                }
                                            </div>
                                        }
                                    </div>

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </li>
    }
</ul>


@helper RenderInOut(IInOutViewModel inOutViewModel)
{
    <div class="address-item " data-address="@inOutViewModel.Address">
        <div class="amount @(inOutViewModel.ShowAggregatedTransactions? "js-toggle-aggregated toggle-aggregated" : "")">
            @inOutViewModel.ValueDescription
            @if (inOutViewModel.ShowAggregatedTransactions)
            {
                <span  class="aggregate-toggle">
                    (@inOutViewModel.AggregatedTransactionCount)
                    <span class="glyphicon glyphicon-triangle-bottom toggle-indicatior"></span>
                </span>
            }
        </div>
        <div class="address">
            @if (inOutViewModel.ShowPreviousTransaction )
            {
                <a href="@Url.Action("Index", "Transaction", new {id = inOutViewModel.PreviousTransactionId})" class="prev-tran">
                    <img src="~/Images/previ-tran.png"/>
                </a>

            }
            @if (inOutViewModel.IsUnrecoginzedAddress)
            {
                <span>Unrecognized address</span>
            }
            else
            {
                <a href="@Url.Action("Index", "Address", new {id = inOutViewModel.Address})">@inOutViewModel.Address</a>
            }
        </div>
    </div>
}