@using BCNExplorer.Web.Helpers
@using Common
@model TransactionViewModel
@{
    Layout = null;
}

<div class="panel transaction_panel js-transaction-details">
    <div class="container">
        <div class="panel__header">
           <div class="row">
                <div class="col-xs-12 col-sm-3 pull-right text-right">
                    <div class="confirmation_label">
                        @if (Model.IsConfirmed)
                        {
                            <span class="label label--green @(Model.Block?.Confirmations>=5?"label--green":"label--gray")">@(Model.Block?.Confirmations) Confirmations</span>
                        }
                        else
                        {
                            <span class="label label--red label--plate">Unconfirmed</span>
                        }
                    </div>
                </div>
                <div class="col-sm-9">
                    <div class="address_code">
                        <a href="@Url.Action("Index", "Transaction", new {id = Model.TransactionId})">@Model.TransactionId</a>
                        <button class="btn btn--icon copy_code" type="button" title="Copy code">
                            <i class="icon icon--copy"></i>
                        </button>
                    </div>
                    @if (Model.Block != null)
                    {
                        <span class="action_text">@Model.Block.Time.ToStringBcnExplolerFormat()</span>
                    }
                    <span class="middot">·</span>
                    <span class="action_text">@Model.InputsCount @Utils.GenderAmount(Model.InputsCount, "input", "inputs", "inputs")</span>
                    <span class="middot">·</span>
                    <span class="action_text">@Model.OutputsCount @Utils.GenderAmount(Model.OutputsCount, "output", "outputs", "outputs")</span>
                </div>
            </div>
        </div>
        <div class="panel__body">

            <div class="transaction_details">
                <div class="transaction_details__header">
                    <table class="issuer">
                        <tbody>
                            <tr>
                                <td class="issuer__img"><img src="/img/assets/bitcoin.png" width="48" alt=""></td>
                                <td class="issuer__content">
                                    <div class="issuer__name pull-left">Bitcoin</div>
                                    <div class="wallet_value pull-right">@Model.Bitcoin.Total.ToStringBtcFormat() BTC</div>
                                    @{
                                        var toggleBtcClass = "js-toggle-changes-container-" + Guid.NewGuid().ToString("N");
                                    }
                                    @if (Model.Bitcoin.ShowWithoutChange)
                                    {
                                        <a href="#" class="btn_show_changes pull-right text--gray js-toggle-change-btn" data-toggle-container=".@toggleBtcClass">
                                            <span class="js-toggle-change-label">Show</span>
                                            <span class="hidden js-toggle-change-label">Hide</span> 
                                            change
                                        </a>
                                    }

                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="@toggleBtcClass">
                    @RenderBtcInOuts(Model.Bitcoin.AggregatedIns, Model.Bitcoin.AggregatedOuts, showConsumedReleased: true)
                </div>
                @if (Model.Bitcoin.ShowWithoutChange)
                {
                    <div class="@toggleBtcClass hidden">
                        @RenderBtcInOuts(Model.Bitcoin.AggregatedInsWithoutChange, Model.Bitcoin.AggregatedOutsWithoutChange, showConsumedReleased: false)
                    </div>
                }
            </div>

            @foreach (var coloredAsset in Model.ColoredAssets)
            {
                var assetUrl = coloredAsset.IsKnown ? Url.Action("Index", "Asset", new {id= coloredAsset.AssetId}) : null;
                <div class="transaction_details">
                    <div class="transaction_details__header">
                        <table class="issuer">
                            <tbody>
                                <tr>
                                    <td class="issuer__img">
                                        <a href="@assetUrl">
                                            <img src="@(!string.IsNullOrEmpty(coloredAsset.IconImageUrl) ? coloredAsset.IconImageUrl: "/img/be/asset_default.jpg")" width="48" alt="">
                                        </a>
                                    </td>
                                    <td class="issuer__content">

                                        <div class="issuer__name pull-left">
                                            <a href="@assetUrl">@coloredAsset.Name</a>
                                        </div>
                                        <div class="wallet_value pull-right">
                                            @coloredAsset.Total.ToStringBtcFormat() @coloredAsset.ShortName
                                        </div>
                                        @{
                                            var toggleColoredClass = "js-toggle-changes-container-" + Guid.NewGuid().ToString("N");
                                        }
                                        @if (coloredAsset.ShowWithoutChange)
                                        {
                                            <a href="#" class="btn_show_changes pull-right text--gray js-toggle-change-btn" data-toggle-container=".@toggleColoredClass">
                                                <span class="js-toggle-change-label">Show</span>
                                                <span class="hidden js-toggle-change-label">Hide</span>
                                                change
                                            </a>
                                        }
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="@toggleColoredClass">
                        @RenderColoredAssetInOuts(coloredAsset, coloredAsset.AggregatedIns, coloredAsset.AggregatedOuts)
                    </div>
                    @if (Model.Bitcoin.ShowWithoutChange)
                    {
                        <div class="@toggleColoredClass hidden">
                            @RenderColoredAssetInOuts(coloredAsset, coloredAsset.AggregatedInsWithoutChange, coloredAsset.AggregatedOutsWithoutChange)
                        </div>
                    }
                </div>
            }

        </div>

    </div>
</div>

@*Helpers faster than Partial Views*@

@helper RenderInOut(IInOutViewModel inOutViewModel, string aggregatedTransContainerId = null)
{

    <div class="transaction_list__item" data-address="@inOutViewModel.Address">
        <div class="row">
            <div class="col-xs-8">
                <div class="links_group">
                    @if (inOutViewModel.ShowPreviousTransaction)
                    {
                        <a href="@Url.Action("Index", "Transaction", new {id = inOutViewModel.PreviousTransactionId})" class="btn btn--icon transaction_prev_link"><i class="icon icon--prev_transaction"></i></a>
                    }

                    @if (inOutViewModel.IsUnrecoginzedAddress)
                    {
                        <span>Unrecognized address</span>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Address", new {id = inOutViewModel.Address})" class="transaction_current_link">
                            @UiHelpers.Truncate(inOutViewModel.Address)
                        </a>
                    }

                </div>
            </div>
            <div class="col-xs-4">

                @if (inOutViewModel.ShowAggregatedTransactions)
                {

                    <a href="#@aggregatedTransContainerId" class="open_hidden_content _word_break">
                        @inOutViewModel.ValueDescription
                        <span class="_no_break">
                            @inOutViewModel.AssetDescription
                            (@inOutViewModel.AggregatedTransactionCount)

                        </span> 
                        <i class="icon icon--chevron-thin-down"></i>
                    </a>
                }
                else
                {
                    <text>
                        @inOutViewModel.ValueDescription
                        <span class="_no_break">
                            @inOutViewModel.AssetDescription
                        </span> 
                    </text>
                }
                @if (inOutViewModel.HasColoredEquivalent)
                {
                    <div class="btn_colored_coin" data-toggle="popover" data-placement="top"
                          data-content="@inOutViewModel.ColoredEquivalentDescription colored" >
                        <span class="btn_colored_coin__icon"></span>
                    </div>
                }
            </div>
        </div>
    </div>
}

@helper RenderBtcInOuts(IEnumerable<AggregatedInOut<AssetInOut>> aggregatedIns, 
    IEnumerable<AggregatedInOut<AssetInOut>> aggregatedOuts, bool showConsumedReleased)
{
    <div class="transaction_details__body">
        <div class="transaction_item">
            <div class="transaction_item__left">
                <div class="transaction_list">
                    @if (Model.IsCoinBase)
                    {
                        <div class="transaction_list__item">
                            <div class="links_group">
                                <i class="icon icon--info"></i> Mined coins
                            </div>
                        </div>
                    }
                    else
                    {
                        foreach (var input in aggregatedIns)
                        {
                            var aggregatedContainerId = Guid.NewGuid().ToString("N");
                            <text>
                                @RenderInOut(input.TitleItem, aggregatedContainerId)
                            </text>

                            <text>
                                @if (input.ShowAggregatedTransactions)
                                {
                                    <div class="transaction_list__advanced" style="display: none;" id="@aggregatedContainerId">
                                        @foreach (var aggregated in input.AggregatedTransactions)
                                        {
                                            @RenderInOut(aggregated)
                                        }
                                    </div>
                                }
                            </text>
                        }
                        if (showConsumedReleased && Model.Bitcoin.ShowReleasedFromColor)
                        {
                            <div class="transaction_list__item">
                                <div class="row">
                                    <div class="col-xs-8">
                                        <div class="links_group">
                                            Released from color
                                        </div>
                                    </div>
                                    <div class="col-xs-4">
                                        <span>@Model.Bitcoin.ReleasedFromColorValue.ToStringBtcFormat()</span>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="transaction_item__center">
                <div class="transaction_arrow"><i class="icon icon--arrow_right_big"></i></div>
            </div>

            <div class="transaction_item__right">
                <div class="transaction_list">
                    @foreach (var output in aggregatedOuts)
                    {
                        var aggregatedContainerId = Guid.NewGuid().ToString("N");
                        <text>
                            @RenderInOut(output.TitleItem, aggregatedContainerId)
                        </text>

                        <text>
                            @if (output.ShowAggregatedTransactions)
                            {
                                <div class="transaction_list__advanced" style="display: none;" id="@aggregatedContainerId">
                                    @foreach (var aggregated in output.AggregatedTransactions)
                                    {
                                        @RenderInOut(aggregated)
                                    }
                                </div>
                            }
                        </text>

                    }
                    @if (showConsumedReleased && Model.Bitcoin.ShowConsumedForColor)
                    {
                        <div class="transaction_list__item">
                            <div class="row">
                                <div class="col-xs-8">
                                    <div class="links_group">
                                        Consumed for color
                                    </div>
                                </div>
                                <div class="col-xs-4">
                                    <span>@Model.Bitcoin.ConsumedForColorValue.ToStringBtcFormat()</span>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="transaction_list__item">
                        <div class="row">
                            <div class="col-xs-8">
                                <div class="links_group">
                                    Fees
                                </div>
                            </div>
                            <div class="col-xs-4">
                                <span>@Model.Bitcoin.FeesDescription</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@helper RenderColoredAssetInOuts(TransactionViewModel.ColoredAsset coloredAsset, 
    IEnumerable<AggregatedInOut<TransactionViewModel.ColoredAsset.In>> aggregatedIns,
    IEnumerable<AggregatedInOut<TransactionViewModel.ColoredAsset.Out>> aggregatedOuts)
{
    <div class="transaction_details__body">
        <div class="transaction_item">
            <div class="transaction_item__left">
                <div class="transaction_list">
                    @if (coloredAsset.IsIssued)
                    {
                        <div class="transaction_list__item">
                            <div class="row">
                                <div class="col-xs-8">
                                    <div class="links_group"><i class="icon icon--info"></i> Issued Assets</div>
                                </div>
                                <div class="col-xs-4">@coloredAsset.IssedQuantity.ToStringBtcFormat() @coloredAsset.ShortName</div>
                            </div>
                        </div>
                    }
                    @foreach (var input in aggregatedIns)
                    {
                        var aggregatedContainerId = Guid.NewGuid().ToString("N");
                        <text>
                            @RenderInOut(input.TitleItem, aggregatedContainerId)
                        </text>

                        <text>
                            @if (input.ShowAggregatedTransactions)
                            {
                                <div class="transaction_list__advanced" style="display: none;" id="@aggregatedContainerId">
                                    @foreach (var aggregated in input.AggregatedTransactions)
                                    {
                                        @RenderInOut(aggregated)
                                    }
                                </div>
                            }
                        </text>
                    }
                </div>
            </div>

            <div class="transaction_item__center">
                <div class="transaction_arrow"><i class="icon icon--arrow_right_big"></i></div>
            </div>

            <div class="transaction_item__right">
                <div class="transaction_list">
                    @if (coloredAsset.IsDestroyed)
                    {
                        <div class="transaction_list__item">
                            <div class="row">
                                <div class="col-xs-8">
                                    <div class="links_group"><i class="icon icon--info"></i> Destroyed Assets</div>
                                </div>
                                <div class="col-xs-4">@coloredAsset.DestroyedQuantity.ToStringBtcFormat() @coloredAsset.ShortName</div>
                            </div>
                        </div>
                    }
                    @foreach (var output in aggregatedOuts)
                    {
                        var aggregatedContainerId = Guid.NewGuid().ToString("N");
                        <text>
                            @RenderInOut(output.TitleItem, aggregatedContainerId)
                        </text>

                        <text>
                            @if (output.ShowAggregatedTransactions)
                            {
                                <div class="transaction_list__advanced" style="display: none;" id="@aggregatedContainerId">
                                    @foreach (var aggregated in output.AggregatedTransactions)
                                    {
                                        @RenderInOut(aggregated)
                                    }
                                </div>
                            }
                        </text>
                    }
                </div>
            </div>
        </div>
    </div>
}