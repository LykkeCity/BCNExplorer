@using Common
@model AddressViewModel
@{
    ViewData["Title"] = "Address - " + Model.AddressId;
}
@section scripts{
    @Scripts.Render("~/bundles/js/transaction")
    @Scripts.Render("~/bundles/js/address")
}

@Html.Hidden("uncolored-address", Model.UncoloredAddress)
@Html.Hidden("colored-address", Model.ColoredAddress)
@Html.Hidden("current-address", Model.AddressId)

<section class="section section--be section--padding">
    <div class="container container--extend">

        <div class="page__header">
            <h2 class="page__title">ADDRESS</h2>
            <div class="page__subtitle h3">@Model.AddressId</div>

        </div>

        <div class="row">
            <div class="col-xs-12 col-md-7">
                <div class="table-responsive">
                    <table class="table table--be_info">
                        <tbody>
                            <tr>
                                <td>Address</td>
                                <td>@Model.AddressId</td>
                            </tr>
                            <tr>
                                <td>Total confirmed transactions</td>
                                <td>@Model.TotalConfirmedTransactions</td>
                            </tr>
                            @if (Model.UncoloredAddress != null)
                            {
                                <tr>
                                    <td>Legacy address</td>
                                    <td><a href="@Url.Action("Index", "Address", new { id = Model.UncoloredAddress })">@Model.UncoloredAddress</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-xs-12">
                <div class="table-responsive">
                    <table class="table table--text_big table--be_info">
                        <tbody>
                            <tr>
                                <th colspan="2">Balance</th>
                            </tr>
                        <tr>
                            <td>
                                <img src="/img/assets/bitcoin.png" width="48" alt="Bitcoin"> <span>Bitcoin</span>
                            </td>
                            <td class="text-right">
                                @BitcoinUtils.SatoshiToBtc(Model.Balance).ToString("0.####################") BTC
                            </td>
                        </tr>

                        @if (Model.ShowUnconfirmedBalance)
                        {
                            <tr>
                                <td><span class="text-muted">Unconfirmed Balance</span></td>

                                <td class="text-right"><span class="text-muted">@BitcoinUtils.SatoshiToBtc(Model.UnconfirmedBalance).ToString("0.####################") BTC</span></td>
                            </tr>
                        }

                            @foreach (var asset in Model.Assets)
                            {
                                var assetDivisibity = Model.AssetDic.GetAssetProp(asset.AssetId, p => p.Divisibility, 0);
                                var assetShortName = Model.AssetDic.GetAssetProp(asset.AssetId, p => p.NameShort, "");
                                var assetName = Model.AssetDic.GetAssetProp(asset.AssetId, p => p.Name, asset.AssetId);
                                var assetIcon = Model.AssetDic.GetAssetProp(asset.AssetId, p => p.IconUrl, null);

                                <tr>
                                    <td>
                                        @if (assetIcon != null)
                                        {
                                            <a href="@Url.Action("Index", "Asset", new {id = asset.AssetId})">

                                                <img src="@assetIcon" width="48" alt="@assetName">
                                            </a>

                                        }
                                        <a href="@Url.Action("Index", "Asset", new {id = asset.AssetId})">
                                            @assetName
                                        </a>
                                        @if (asset.ShowUnconfirmedBalance)
                                        {
                                            <br/>
                                            <span class="text-muted">Unconfirmed Balance</span>
                                        }
                                    </td>
                                    <td class="text-right">
                                        @BitcoinUtils.CalculateColoredAssetQuantity(asset.Quantity, assetDivisibity).ToString("0.####################") @assetShortName
                                        @if (asset.ShowUnconfirmedBalance)
                                        {
                                            <br />
                                            <span class="text-muted">@BitcoinUtils.SatoshiToBtc(asset.UnconfirmedQuantity).ToString("0.####################") @assetShortName</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>


        @Html.Partial("~/Views/Transaction/TransactionIdList.cshtml", Model.TransactionIdList)

    </div>
</section>
